diff --git a/node_modules/react-native-image-crop-tools/android/src/main/java/com/parsempo/ImageCropTools/ImageCropViewManager.kt b/node_modules/react-native-image-crop-tools/android/src/main/java/com/parsempo/ImageCropTools/ImageCropViewManager.kt
index 10d8f8c..b7cc61a 100644
--- a/node_modules/react-native-image-crop-tools/android/src/main/java/com/parsempo/ImageCropTools/ImageCropViewManager.kt
+++ b/node_modules/react-native-image-crop-tools/android/src/main/java/com/parsempo/ImageCropTools/ImageCropViewManager.kt
@@ -13,13 +13,18 @@ import com.facebook.react.uimanager.events.RCTEventEmitter
 import com.theartofdev.edmodo.cropper.CropImageView
 import java.io.File
 import java.util.*
+import android.util.Log
+import android.os.Handler
+import android.graphics.Rect
 
 class ImageCropViewManager: SimpleViewManager<CropImageView>() {
     companion object {
         const val REACT_CLASS = "CropView"
         const val ON_IMAGE_SAVED = "onImageSaved"
         const val SOURCE_URL_PROP = "sourceUrl"
+        const val INITIAL_CROP_FRAME_PROP = "initialImageCropFrame"
         const val KEEP_ASPECT_RATIO_PROP = "keepAspectRatio"
+        const val ANGLE_PROP = "angle"
         const val ASPECT_RATIO_PROP = "cropAspectRatio"
         const val SAVE_IMAGE_COMMAND = 1
         const val ROTATE_IMAGE_COMMAND = 2
@@ -35,6 +40,11 @@ class ImageCropViewManager: SimpleViewManager<CropImageView>() {
                 map.putString("uri", result.uri.toString())
                 map.putInt("width", result.cropRect.width())
                 map.putInt("height", result.cropRect.height())
+                map.putInt("bottom", result.getCropRect().bottom)
+                map.putInt("top", result.getCropRect().top)
+                map.putInt("right", result.getCropRect().right)
+                map.putInt("left", result.getCropRect().left)
+
                 reactContext.getJSModule(RCTEventEmitter::class.java)?.receiveEvent(
                         view.id,
                         ON_IMAGE_SAVED,
@@ -97,6 +107,21 @@ class ImageCropViewManager: SimpleViewManager<CropImageView>() {
         view.setFixedAspectRatio(fixed)
     }
 
+    @ReactProp(name = INITIAL_CROP_FRAME_PROP)
+    fun setCropRect(view: CropImageView, frame: ReadableMap?) {
+        if (frame != null) {
+            view.setCropRect(Rect(frame.getInt("left"), frame.getInt("top"), frame.getInt("right"), frame.getInt("bottom")))
+        }
+    }
+
+    @ReactProp(name = ANGLE_PROP)
+    fun setRotatedDegrees(view: CropImageView, angle: Int) {
+        Handler().postDelayed({
+            view.rotateImage(angle)
+        }, 400)
+        Log.v("Angle", ""+angle)
+    }
+
     @ReactProp(name = ASPECT_RATIO_PROP)
     fun setAspectRatio(view: CropImageView, aspectRatio: ReadableMap?) {
         if (aspectRatio != null) {
diff --git a/node_modules/react-native-image-crop-tools/dist/crop-view.component.d.ts b/node_modules/react-native-image-crop-tools/dist/crop-view.component.d.ts
index b6099fb..2bed735 100644
--- a/node_modules/react-native-image-crop-tools/dist/crop-view.component.d.ts
+++ b/node_modules/react-native-image-crop-tools/dist/crop-view.component.d.ts
@@ -10,6 +10,10 @@ declare type Props = {
     style?: StyleProp<ViewStyle>;
     onImageCrop?: (res: Response) => void;
     keepAspectRatio?: boolean;
+    initialImageCropFrame?: {
+        x: number, y:number, width: number, height: number
+    },
+    angle?: number,
     aspectRatio?: {
         width: number;
         height: number;
diff --git a/node_modules/react-native-image-crop-tools/dist/crop-view.component.js b/node_modules/react-native-image-crop-tools/dist/crop-view.component.js
index 7c93dc5..5f5b62a 100644
--- a/node_modules/react-native-image-crop-tools/dist/crop-view.component.js
+++ b/node_modules/react-native-image-crop-tools/dist/crop-view.component.js
@@ -13,10 +13,10 @@ class CropView extends React.PureComponent {
         };
     }
     render() {
-        const { sourceUrl, style, onImageCrop, keepAspectRatio, aspectRatio } = this.props;
+        const { sourceUrl, style, onImageCrop, keepAspectRatio, aspectRatio, initialImageCropFrame, angle } = this.props;
         return (React.createElement(RCTCropView, { ref: this.viewRef, sourceUrl: sourceUrl, style: style, onImageSaved: (event) => {
                 onImageCrop(event.nativeEvent);
-            }, keepAspectRatio: keepAspectRatio, cropAspectRatio: aspectRatio }));
+            }, keepAspectRatio: keepAspectRatio, cropAspectRatio: aspectRatio, initialImageCropFrame: initialImageCropFrame, angle: angle }));
     }
 }
 CropView.defaultProps = {
